import random

from depot import map_matrix

class General():

    # general settings
    WORLD_WIDTH = 2000
    WORLD_HEIGHT = 1000

    # starting cell matrix of the game 100 x 200
    cell_matrix: list[list[str]] = []
    # starting utility (z.B food) matrix of the game
    utility_matrix: list[list[str]] = []

    # cell list for created cells
    all_cells: list = []

    for y in range(WORLD_HEIGHT//10):
        cell_matrix.append([])
        utility_matrix.append([])
        for _ in range(WORLD_WIDTH//10):
            cell_matrix[y].append("")
            utility_matrix[y].append("")
    ###print(len(cell_matrix[0]))

    def __init__(self):


        # colors
        self.colors = {
            "WHITE" : (255, 255, 255), #0
            "BLACK" : (0, 0, 0), #1
            "GRAY" : (125, 125, 125), #2
            "ARCTIC_GRAY" : (100, 125, 125), #3
            "RED" : (255, 0, 0), #4
            "DARK_RED" : (150, 30, 30), #5
            "GREEN" : (0, 255, 0), #7
            "DARK_GREEN" : (40, 150, 50), #6
            "DARK_BLUE" : (0, 0, 255), #8
            "BRIGHT_BLUE" : (0, 255, 255), #9
            "PURPLE" : (120, 60, 125), #10
            "YELLOW" : (220, 230, 80), #11
            "BROWN" : (120, 95, 60), #12
            "BRIGHT_BROWN" : (200, 160, 50), #13
            "DARK_BROWN" : (50, 25, 0), #14
            "ALGEA_BLUE" : (160, 225, 235) #15
        }


        self.starting_generation_producer_cell_count: int = 1500
        self.starting_generation_predator_cell_count: int = 1

        self.one_to_one_zone: list[tuple[int, int]] = [(-1, -1), (-1, 0), (-1, 1), 
                                           (0, -1), (0, 1), 
                                           (1, -1), (1, 0), (1, 1)]
        self.zwo_to_zwo_zone: list[tuple[int, int]] = [(-2, -2), (-2, -1), (-2, 0), (-2, 1), (-2, 2), 
                                           (-1, -2), (-1, -1), (-1, 0), (-1, 1), (-1, 2), 
                                           (0, -2), (0, -1), (0, 1), (0, 2), 
                                           (1, -2), (1, -1), (1, 0), (1, 1), (1, 2), 
                                           (2, -2), (2, -1), (2, 0), (2, 1), (2, 2)]
        self.three_to_three_zone: list[tuple[int, int]] = [(-3, -3), (-3, -2), (-3, -1), (-3, 0), (-3, 1), (-3, 2), (-3, 3), 
                                               (-2, -3), (-2, -2), (-2, -1), (-2, 0), (-2, 1), (-2, 2), (-2, 3), 
                                               (-1, -3), (-1, -2), (-1, -1), (-1, 0), (-1, 1), (-1, 2), (-1, 3), 
                                               (0, -3), (0, -2), (0, -1), (0, 1), (0, 2), (0, 3), 
                                               (1, -3), (1, -2), (1, -1), (1, 0), (1, 1), (1, 2), (1, 3), 
                                               (2, -3), (2, -2), (2, -1), (2, 0), (2, 1), (2, 2), (2, 3), 
                                               (3, -3), (3, -2), (3, -1), (3, 0), (3, 1), (3, 2), (3, 3)]
        self.four_to_four_zone: list[tuple[int, int]] = [(-4, -4), (-4, -3), (-4, -2), (-4, -1), (-4, 0), (-4, 1), (-4, 2), (-4, 3), (-4, 4), 
                                             (-3, -4), (-3, -3), (-3, -2), (-3, -1), (-3, 0), (-3, 1), (-3, 2), (-3, 3), (-3, 4), 
                                             (-2, -4), (-2, -3), (-2, -2), (-2, -1), (-2, 0), (-2, 1), (-2, 2), (-2, 3), (-2, 4), 
                                             (-1, -4), (-1, -3), (-1, -2), (-1, -1), (-1, 0), (-1, 1), (-1, 2), (-1, 3), (-1, 4), 
                                             (0, -4), (0, -3), (0, -2), (0, -1), (0, 1), (0, 2), (0, 3), (0, 4), 
                                             (1, -4), (1, -3), (1, -2), (1, -1), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), 
                                             (2, -4), (2, -3), (2, -2), (2, -1), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), 
                                             (3, -4), (3, -3), (3, -2), (3, -1), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), 
                                             (4, -4), (4, -3), (4, -2), (4, -1), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4)]
        self.five_to_five_zone: list[tuple[int, int]] = [(-5, -5), (-5, -4), (-5, -3), (-5, -2), (-5, -1), (-5, 0), (-5, 1), (-5, 2), (-5, 3), (-5, 4), (-5, 5), 
                                             (-4, -5), (-4, -4), (-4, -3), (-4, -2), (-4, -1), (-4, 0), (-4, 1), (-4, 2), (-4, 3), (-4, 4), (-4, 5), 
                                             (-3, -5), (-3, -4), (-3, -3), (-3, -2), (-3, -1), (-3, 0), (-3, 1), (-3, 2), (-3, 3), (-3, 4), (-3, 5), 
                                             (-2, -5), (-2, -4), (-2, -3), (-2, -2), (-2, -1), (-2, 0), (-2, 1), (-2, 2), (-2, 3), (-2, 4), (-2, 5), 
                                             (-1, -5), (-1, -4), (-1, -3), (-1, -2), (-1, -1), (-1, 0), (-1, 1), (-1, 2), (-1, 3), (-1, 4), (-1, 5), 
                                             (0, -5), (0, -4), (0, -3), (0, -2), (0, -1), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), 
                                             (1, -5), (1, -4), (1, -3), (1, -2), (1, -1), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), 
                                             (2, -5), (2, -4), (2, -3), (2, -2), (2, -1), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), 
                                             (3, -5), (3, -4), (3, -3), (3, -2), (3, -1), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), 
                                             (4, -5), (4, -4), (4, -3), (4, -2), (4, -1), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), 
                                             (5, -5), (5, -4), (5, -3), (5, -2), (5, -1), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]

        self.map_matrix = map_matrix
    
    def is_movement_possible(self, starting_x: int, starting_y: int, dx: int, dy: int) -> bool:

        # check if the new position is not out of bounds
        #   is not occupied
        if (0 <= starting_x + dx <= self.WORLD_WIDTH // 10 - 1) and (0 <= starting_y + dy <= self.WORLD_HEIGHT // 10 - 1) and \
            not(self.cell_matrix[starting_y + dy][starting_x + dx]):
            return True
        return False
